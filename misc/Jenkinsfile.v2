pipeline {
    agent any

    environment {
        DOCKER_IMAGE = "ejujin/docker-nodejs-demo"
    }

    stages {
        stage('Preparation') {
            steps {
                script {
                    checkout scm
                    sh "git rev-parse --short HEAD > .git/commit-id"
                    env.COMMIT_ID = readFile('.git/commit-id').trim()
                }
            }
        }

        stage('Test') {
            steps {
                script {
                    docker.image('node:16').pull()
                    docker.image('node:16').inside {
                        sh '''
                            echo "Node.js 및 npm 버전 확인"
                            node -v
                            npm -v

                            echo "package.json 엔진 버전 수정"
                            sed -i \'s/"node": "\\^4.6.1"/"node": ">=16.0.0"/g\' package.json

                            echo "의존성 설치"
                            npm install --only=dev --legacy-peer-deps || exit 1

                            echo "테스트 파일 확인"
                            ls -al test/ || echo "⚠️ test/ 폴더가 없습니다!"

                            echo "테스트 실행"
                            if [ -d "test" ] && [ "$(ls -A test/)" ]; then
                                npm test -- test/**/*.test.js || exit 1
                            else
                                echo "⚠️ 테스트 파일이 존재하지 않음! 테스트 단계를 건너뜁니다."
                                exit 0
                            fi
                        '''
                    }
                }
            }
            post {
                failure {
                    script {
                        echo "❌ 테스트 실패: 하지만 파이프라인이 계속 실행됩니다."
                        currentBuild.result = 'UNSTABLE'
                    }
                }
            }
        }

        stage('Test with a DB') {
            when {
                expression { currentBuild.result == null || currentBuild.result == 'SUCCESS' || currentBuild.result == 'UNSTABLE' }
            }
            steps {
                script {
                    echo "MySQL 컨테이너 실행"
                    def mysql = docker.image('mysql').run("-e MYSQL_ALLOW_EMPTY_PASSWORD=yes")

                    docker.image('node:16').pull()
                    docker.image('node:16').inside("--link ${mysql.id}:mysql") {
                        sh '''
                            echo "MySQL 클라이언트 설치"
                            apt update && apt install -y mysql-client || exit 1

                            echo "MySQL 연결 테스트"
                            mysql --host=mysql --port=3306 -u root -e "SHOW DATABASES;" || exit 1

                            echo "의존성 설치"
                            npm install --only=dev --legacy-peer-deps || exit 1

                            echo "테스트 실행"
                            if [ -d "test" ] && [ "$(ls -A test/)" ]; then
                                npm test -- test/**/*.test.js || exit 1
                            else
                                echo "⚠️ 테스트 파일이 존재하지 않음! 테스트 단계를 건너뜁니다."
                                exit 0
                            fi
                        '''
                    }

                    echo "MySQL 컨테이너 종료"
                    mysql.stop()
                    mysql.remove()
                }
            }
        }

        stage('Docker Build & Push') {
            when {
                expression { currentBuild.result == null || currentBuild.result == 'SUCCESS' || currentBuild.result == 'UNSTABLE' }
            }
            steps {
                script {
                    docker.withRegistry('https://index.docker.io/v2/', '6e025c89-6fb8-4e11-9894-10f0b0a40896') {
                        echo "Buildx 사용 가능 여부 확인 중..."
                        def buildxExists = sh(script: "docker buildx version", returnStatus: true) == 0
                        
                        if (!buildxExists) {
                            echo "Buildx가 설치되지 않음. 설치 진행..."
                            sh '''
                                mkdir -p ~/.docker/cli-plugins
                                curl -sL https://github.com/docker/buildx/releases/latest/download/buildx-v0.20.1.linux-amd64 -o ~/.docker/cli-plugins/docker-buildx
                                chmod +x ~/.docker/cli-plugins/docker-buildx
                            '''
                        }

                        echo "Docker Buildx 설정 중..."
                        def buildxList = sh(script: "docker buildx ls | grep -q mybuilder", returnStatus: true)
                        if (buildxList != 0) {
                            sh "docker buildx create --name mybuilder --use"
                        } else {
                            sh "docker buildx use mybuilder"
                        }

                        echo "Docker 이미지 빌드 및 푸시"
                        sh '''
                            docker buildx inspect mybuilder || docker buildx create --name mybuilder --use
                            docker buildx build --platform linux/amd64 -t ${DOCKER_IMAGE}:${env.COMMIT_ID} --push .
                        '''
                    }
                }
            }
        }
    }
}
